
########################
Author: Manoj
Date: 30/01/2019
course: Python with Machine Learning
#######################

Variables:
*	Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory



counter = 100          # An integer assignment
miles   = 1000.0       # A floating point
name    = "John"       # A string

print(counter)
print(miles)
print(name)

a = b = c = 1
a,b,c = 1,2,"john"


Data Types:

Numbers
String
List
Tuple
Dictionary


=>Numbers:
var1 = 1
var2 = 10
del var
del var_a, var_b

-->Numerical Types
--int (signed integers)--(10,100,76)
--long (long integers, they can also be represented in octal and hexadecimal)--(51924361L,-0x19323L,0xDEFABCECBDAECBFBAEl)
--float (floating point real values)--(32.3+e18,3.3,0.9898,70.2-E12)
--complex (complex numbers)--(3.14j,9.322e-36j,-.6545+0J)

Strings:
str = 'Hello World!'

print str          # Prints complete string
print str[0]       # Prints first character of the string
print str[2:5]     # Prints characters starting from 3rd to 5th
print str[2:]      # Prints string starting from 3rd character
print str * 2      # Prints string two times
print str + "TEST" # Prints concatenated string

=>Lists:

list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print(list)          # Prints complete list
print(list[0])       # Prints first element of the list
print(list[1:3])     # Prints elements starting from 2nd till 3rd 
print(list[2:])      # Prints elements starting from 3rd element
print(tinylist * 2)  # Prints list two times
print(list + tinylist) # Prints concatenated lists



=>Tuples:
*	Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, 
	while tuples are enclosed in parentheses (( )) and cannot be updated. Tuples can be thought of as read-only lists.
	
tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
tinytuple = (123, 'john')

print(tuple)           # Prints complete list
print(tuple[0])        # Prints first element of the list
print(tuple[1:3])      # Prints elements starting from 2nd till 3rd 
print(tuple[2:])       # Prints elements starting from 3rd element
print(tinytuple * 2)   # Prints list two times
print(tuple + tinytuple) # Prints concatenated lists


tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
list = [ 'abcd', 786 , 2.23, 'john', 70.2  ]
tuple[2] = 1000    # Invalid syntax with tuple
list[2] = 1000     # Valid syntax with list

=>Dictionary:
*	kind of hash table type and are simply unordered

dict = {}
dict['one'] = "This is one"
dict[2]     = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}


print(dict['one'])       # Prints value for 'one' key
print(dict[2])           # Prints value for 2 key
print(tinydict)          # Prints complete dictionary
print(tinydict.keys())   # Prints all the keys
print(tinydict.values()) # Prints all the values









